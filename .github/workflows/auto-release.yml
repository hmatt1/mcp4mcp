name: Auto-Release on Main

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for version calculation
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Calculate version
      id: version
      run: |
        # Get commit count for auto-versioning
        COMMIT_COUNT=$(git rev-list --count HEAD)
        BASE_VERSION="0.1"
        VERSION="${BASE_VERSION}.${COMMIT_COUNT}"
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Version will be: ${VERSION}"
    
    - name: Update version in pyproject.toml
      run: |
        sed -i "s/version = \".*\"/version = \"${{ steps.version.outputs.version }}\"/" pyproject.toml
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: python -m build
    
    - name: Check package
      run: twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  publish:
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
    
    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        pip install twine
        twine upload dist/*

  create-release:
    needs: [build, publish]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create and push tag
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git tag v${{ needs.build.outputs.version }}
        git push origin v${{ needs.build.outputs.version }}
    
    - name: Create GitHub Release
      run: |
        gh release create v${{ needs.build.outputs.version }} \
          --title "mcp4mcp v${{ needs.build.outputs.version }}" \
          --notes "Auto-release for commit ${{ github.sha }}" \
          --generate-notes
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-install:
    needs: [build, publish]
    runs-on: ubuntu-latest
    
    steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Wait for package to be available
      run: sleep 60  # Wait 1 minute for PyPI to process
    
    - name: Test installation
      run: |
        pip install mcp4mcp==${{ needs.build.outputs.version }}
        python -c "import mcp4mcp; print('mcp4mcp imported successfully')"
